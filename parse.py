# -*- coding: utf-8 -*-
"""transaction_set.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NoGc75ks9KY6SIhNT64w4_bNh0mu_R6d
"""

from tqdm import tqdm
import time

import json

def saveToJson(data, filename="xl213869f8_230415_i5.json"):
    # Load existing data
    try:
        with open(filename, 'r') as file:
            existing_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        existing_data = []

    # Append new data
    existing_data.append(data)

    # Save back to file
    with open(filename, 'w') as file:
        json.dump(existing_data, file, indent=4)

def saveParsedData(data):
    with open("xl213869f8_230415_i5.837.json", 'w') as f:
        json.dump(data, f, indent=4)

service_line_parsing_info = {
    "SV2": {
        "name": "service_line_info_2",
        "contains_variable_elements": False,
        "rule": "segment_code*sv2_procedure_code*sv2_initial_hcpcs_code*sv2_initial_amount*sv2_initial_unit*sv2_initial_quantity"
    },
    "SV1": {
        "name": "service_line_info_1",
        "contains_variable_elements": False,
        "rule": "segment_code*sv1_cpt_code_info*sv1_charge_amount*sv1_basis_for_measurement*sv1_quantity*sv1_facilitycode*blank*sv1_diagnosis_code_pointer"
    },
    "DTP": {
        "name": "date",
        "contains_variable_elements": False,
        "rule": "segment_code*initial_date_qualifier*initial_date_format*initial_date"
    },
    "REF": {
        "name": "reference",
        "contains_variable_elements": False,
        "rule": "segment_code*reference_qualifier*reference_id"
    },
    "SVD": {
        "name": "provider_info",
        "contains_variable_elements": False,
        "rule": "segment_code*identification_code_of_payer*svd_amount*svd_hcpcs_code*svd_procedure_code*svd_quantity"
    },
    "CAS": {
        "name": "claim_adjustment",
        "contains_variable_elements": True,
        "rule": "group_code*reason_code*claim_adjustment_monetary_amount"
    },
    "AMT": {
        "name": "amount",
        "contains_variable_elements": False,
        "rule": "segment_code*qualifier*value"
    },
    "LIN": {
        "name": "drug_identification",
        "contains_variable_elements": False,
        "rule": "segment_code*drug_identification_qualifier*drug_identification_code"
    },
    "CTP": {
        "name": "drug_unit",
        "contains_variable_elements": False,
        "rule":"segment_code*blank*blank*blank*drug_unit_count*drug_unit"
    },
    "NM1": {
        "name": "rendering_provider",
        "contains_variable_elements": False,
        "rule": "segment_code*entity_type_qualifier*entity_type*last_name*first_name*middle_name*prefix*suffix*identification_code_qualifier*npi_number"
    },
    "PRV": {
        "name": "provider_info",
        "contains_variable_elements": False,
        "rule": "segment_code*prv_provider_code*prv_reference_identification_qualifier*prv_reference_identification"
    },
}

def parse_edi(edi_data):
    # splitting the whole data into segments
    # print(edi_data[:50])
    segments = edi_data.split("~")
    segments = segments[:-1]
    # print("orgignal",len(segments))

    # print("modified",len(segments[2:]))
    # print(segments[:3])

    #initializing JSON conversion with ISA and GS
    elements = segments[0].split("*")
    elements_length = len(elements)

    if elements[0].strip() == "ISA":
      healthcare_claim_set = {
                "ISA": {
                      "AuthorizationInformationQualifier": elements[1] if elements_length > 1 else '',
                      "AuthorizationInformation": elements[2] if elements_length > 2 else '',
                      "SecurityInformationQualifier": elements[3] if elements_length > 3 else '',
                      "SecurityInformation": elements[4] if elements_length > 4 else '',
                      "InterchangeIDQualifierSender": elements[5] if elements_length > 5 else '',
                      "InterchangeSenderID": elements[6] if elements_length > 6 else '',
                      "InterchangeIDQualifierReceiver": elements[7] if elements_length > 7 else '',
                      "InterchangeReceiverID": elements[8] if elements_length > 8 else '',
                      "InterchangeDate": elements[9] if elements_length > 9 else '',
                      "InterchangeTime": elements[10] if elements_length > 10 else '',
                      "InterchangeControlStandardsIdentifier": elements[11] if elements_length > 11 else '',
                      "InterchangeControlVersionNumber": elements[12] if elements_length > 12 else '',
                      "InterchangeControlNumber": elements[13] if elements_length > 13 else '',
                      "AcknowledgmentRequested": elements[14] if elements_length > 14 else '',
                      "UsageIndicator": elements[15] if elements_length > 15 else '',
                      "ComponentElementSeparator": elements[16] if elements_length > 16 else ''
                }
              }

    elements = segments[1].split("*")
    elements_length = len(elements)
    if elements[0].strip() == "GS":
          healthcare_claim_set["ISA"].update({
              "FunctionalIdentifierCode": elements[1] if elements_length > 1 else '',
              "ApplicationSenderCode": elements[2] if elements_length > 2 else '',
              "ApplicationReceiverCode": elements[3] if elements_length > 3 else '',
              "Date": elements[4] if elements_length > 4 else '',
              "Time": elements[5] if elements_length > 5 else '',
              "GroupControlNumber": elements[6] if elements_length > 6 else '',
              "ResponsibleAgencyCode": elements[7] if elements_length > 7 else '',
              "VersionReleaseIndustryIdentifierCode": elements[8] if elements_length > 8 else '',
              "Transaction": []
          })
    # # print(healthcare_claim_set)
    transactions = []

    billing_providers = []
    billing_provider = {}

    subscriber_info = {}
    claiminfo = {}

    segment_idx = 2
    loop_count = 0

    segments_length = len(segments)

    with tqdm(total=len(segments[2:])) as pbar:
        while segment_idx < segments_length:

            pbar.update(segment_idx - loop_count)
            loop_count = segment_idx
            # # print("working on, loop_count: {}, segment_idx: {} segment: {}".format(loop_count, segment_idx, elements[0].strip()))
            segment = segments[segment_idx]
            elements = segment.split("*")
            elements_length = len(elements)
            # print("elements : ", elements)

            start_time = time.time()
            if elements[0].strip() == "GE":
              healthcare_claim_set["ISA"].update({"number_of_transaction_sets" : elements[1]})
              end_time = time.time()
              # # print("time_taken for GE segment: {}".format(end_time - start_time))

                # elements is GS.

            if elements[0].strip() == "IEA":
              healthcare_claim_set["ISA"].update({"number_of_included_functional_groups" : elements[1]})
              break

            if elements[0].strip() == "ST":

                transaction = {
                    "ControlNumber": elements[2] if elements_length > 2 else '',
                    "ImplementationConventionReference": elements[3] if elements_length > 3 else ''
                }
                end_time = time.time()
                # print("time_taken for ST segment: {}".format(end_time - start_time))

            elif elements[0].strip() == "BHT":
                transaction.update({
                    "HierarchicalStructureCode": elements[1] if elements_length > 1 else '',
                    "TransactionSetPurposeCode": elements[2] if elements_length > 2 else '',
                    "ReferenceIdentification": elements[3] if elements_length > 3 else '',
                    "Date": elements[4] if elements_length > 4 else '',
                    "Time": elements[5] if elements_length > 5 else '',
                    "TransactionTypeCode": elements[6] if elements_length > 6 else ''
                })
                # print(transaction)
                end_time = time.time()
                # print("time_taken for BHT segment: {}".format(end_time - start_time))

            elif elements[0].strip() == "NM1" and elements[1] == "41":
                transaction["Submitter"] = {
                    "EntityTypeQualifier": elements[2] if elements_length > 2 else '',
                    "OrganizationName": elements[3] if elements_length > 3 else '',
                    "FirstName": elements[4] if elements_length > 4 else '',
                    "MiddleName": elements[5] if elements_length > 5 else '',
                    "Prefix": elements[6] if elements_length > 6 else '',
                    "Suffix": elements[7] if elements_length > 7 else '',
                    "IdentificationCodeQualifier": elements[8] if elements_length > 8 else '',
                    "IdentificationCode": elements[9] if elements_length > 9 else ''
                }

                # Check for the next segment for PER*IC info
                if segments.index(segment) + 1 < len(segments):
                    next_segment = segments[segments.index(segment) + 1].split("*")
                    if next_segment[0].strip() == "PER" and next_segment[1] == "IC":
                        transaction["Submitter"].update({
                            "CommunicationContact": next_segment[2] if len(next_segment) > 2 else '',
                            "TelephoneNumber": next_segment[4] if len(next_segment) > 4 else '',
                            "FaxNumber": next_segment[6] if len(next_segment) > 6 else '',
                            "Email": next_segment[8] if len(next_segment) > 8 else ''
                        })

                end_time = time.time()
                # print("time_taken for NM1 41 segment: {}".format(end_time - start_time))

            # Receiver Information (NM1*40)
            elif elements[0].strip() == "NM1" and elements[1] == "40":
                transaction["Receiver"] = {
                    "EntityTypeQualifier": elements[2] if elements_length > 2 else '',
                    "OrganizationName": elements[3] if elements_length > 3 else '',
                    "FirstName": elements[4] if elements_length > 4 else '',
                    "MiddleName": elements[5] if elements_length > 5 else '',
                    "Prefix": elements[6] if elements_length > 6 else '',
                    "Suffix": elements[7] if elements_length > 7 else '',
                    "IdentificationCodeQualifier": elements[8] if elements_length > 8 else '',
                    "IdentificationCode": elements[9] if elements_length > 9 else ''
                }
                end_time = time.time()
                # print("time_taken for NM1 40 segment: {}".format(end_time - start_time))

            # Hierarchical Level 1 (HL)
            elif elements[0].strip() == "HL" and elements[1] == "1":
                if "BillingProvider" not in transaction:
                  transaction["BillingProvider"] = {}
                transaction["BillingProvider"].update({
                    "EntityTypeQualifier": elements[4] if elements_length > 4 else ''
                })
                segment_idx += 1
                elements = segments[segment_idx].split('*')
                elements_length = len(elements)

                # Provider Specialty Information (PRV)
                if elements[0].strip() == "PRV":
                    transaction["BillingProvider"].update({
                        "ProviderCode": elements[1] if elements_length > 1 else '',
                        "ReferenceIdentificationQualifier": elements[2] if elements_length > 2 else '',
                        "ReferenceIdentification": elements[3] if elements_length > 3 else ''

                })
                else:
                  segment_idx -= 1

                end_time = time.time()
                # print("time_taken for HL segment: {}".format(end_time - start_time))

            elif elements[0].strip() == "NM1" and elements[1] == "85":
                transaction["BillingProvider"].update({
                    "EntityTypeQualifier" : elements[2].strip() if elements_length > 2 else "",
                    "OrganizationName" : elements[3].strip() if elements_length > 3 else "",
                    "FirstName" : elements[4].strip() if elements_length > 4 else "",
                    "MiddleName" : elements[5].strip() if elements_length > 5 else "",
                    "Prefix" : elements[6].strip() if elements_length > 6 else "",
                    "Suffix" : elements[7].strip() if elements_length > 7 else "",
                    "IdentificationCodeQualifier": elements[8].strip() if elements_length > 8 else "",
                    "IdentificationCode" : elements[9].strip() if elements_length > 9 else ""
                })

                # Check if N3 and N4 segments exist
                while(True):
                  segment_idx += 1
                  elements = segments[segment_idx].split('*')
                  elements_length = len(elements)
                  if elements[0].strip() == "N3":
                      transaction["BillingProvider"]["Address"] = elements[1] if elements_length > 1 else ""

                  elif elements[0].strip() == "N4":
                      transaction["BillingProvider"]["City"] = elements[1].strip() if elements_length > 1 else ""
                      transaction["BillingProvider"]["State"] = elements[2].strip() if elements_length > 2 else ""
                      transaction["BillingProvider"]["PostalCode"] = elements[3].strip() if elements_length > 3 else ""

                  elif elements[0].strip() == "REF":
                    transaction["BillingProvider"].update({
                          "ReferenceCodeQualifier": elements[1] if elements_length > 1 else '',
                          "ReferenceCode": elements[2] if elements_length > 2 else ''
                      })
                  elif elements[0].strip() == "PER" and elements[1] == "IC":
                        transaction["BillingProvider"].update({
                            "CommunicationContact": elements[2] if elements_length > 2 else '',
                            "Telephone": elements[4] if elements_length > 4 else '',
                            "FaxNumber": elements[6] if elements_length > 6 else '',
                            "Email": elements[8] if elements_length > 8 else ''
                        })
                        break

                  end_time = time.time()
                  # print("time_taken for NM1 85 segment: {}".format(end_time - start_time))

            elif elements[0].strip() == "NM1" and elements[1] == "87":
                transaction["BillingProvider"]["PayToAddress"] = {
                "EntityType": elements[2].strip() if elements_length > 2 else "",
                }

                # Check if N3 and N4 segments exist
                next_index = segments.index(segment) + 1
                if next_index < len(segments):
                    next_segment = segments[next_index].split("*")
                    if next_segment[0].strip() == "N3":
                        transaction["BillingProvider"]["PayToAddress"]["Address"] = next_segment[1] if len(next_segment) > 1 else ""

                        next_next_index = next_index + 1
                        if next_next_index < len(segments):
                            next_next_segment = segments[next_next_index].split("*")
                            if next_next_segment[0].strip() == "N4":
                                transaction["BillingProvider"]["PayToAddress"]["City"] = next_next_segment[1].strip() if len(next_next_segment) > 1 else ""
                                transaction["BillingProvider"]["PayToAddress"]["State"] = next_next_segment[2].strip() if len(next_next_segment) > 2 else ""
                                transaction["BillingProvider"]["PayToAddress"]["PostalCode"] = next_next_segment[3].strip() if len(next_next_segment) > 3 else ""
                end_time = time.time()
                # print("time_taken for NM1 87 segment: {}".format(end_time - start_time))

            elif elements[0].strip() == "SBR":
                if "SBRSet" not in transaction: transaction["SBRSet"] = []
                else:
                  transaction["SBRSet"].append(subscriber_info)
                subscriber_info = {
                    "PayerResponsibilityCode": elements[1] if elements_length > 1 else '',
                    "RelationshipCode": elements[2] if elements_length > 2 else '',
                    "ReferralTypeCode": elements[3] if elements_length > 3 else '',
                    "Name": elements[4] if elements_length > 4 else '',
                    "InsuranceTypeCode": elements[5] if elements_length > 5 else '',
                    "CoordinationBenefitCode": elements[6] if elements_length > 6 else '',
                    "ResponseCode": elements[7] if elements_length > 7 else '',
                    "EmploymentStatusCode": elements[8] if elements_length > 8 else '',
                    "ClaimFilingIndicatorCode": elements[9] if elements_length > 9 else '',
                }

                end_time = time.time()
                # print("time_taken for SBR segment: {}".format(end_time - start_time))

            # ...

            elif elements[0].strip() == "OI":
                subscriber_info.update({
                    "ProviderBenefitsAssignmentCertification": elements[3] if elements_length > 3 else '',
                    "ReleaseofInformationCode": elements[6] if elements_length > 6 else ''
                })

            elif elements[0].strip() == "AMT":
                subscriber_info.update({
                    "QualifierCode": elements[1] if elements_length > 1 else '',
                    "MonetaryAmount": elements[2] if elements_length > 2 else ''
                })
            elif elements[0].strip() == "REF":
                subscriber_info.update({
                    "ReferenceIdentificationQualifier": elements[1] if elements_length > 1 else '',
                    "ReferenceIdentification": elements[2] if elements_length > 2 else ''
                })

            elif elements[0].strip() == "MOA":
                subscriber_info.update({
                    "AttachmentTypeCode": elements[1] if elements_length > 1 else '',
                    "AttachmentDescription": elements[2] if elements_length > 2 else '',
                    "EntityIdentifierCode": elements[3] if elements_length > 3 else '',
                    "AttachmentIdentificationCode": elements[4] if elements_length > 4 else '',
                    "FreeformInformation": elements[5] if elements_length > 5 else '',
                })

            elif elements[0].strip() == "NM1" and elements[1] == "IL":
                subscriber_info.update({
                    "InsuredParty": elements[2] if elements_length > 2 else '',
                    "LastName": elements[3] if elements_length > 3 else '',
                    "FirstName": elements[4] if elements_length > 4 else '',
                    "MiddleName": elements[5] if elements_length > 5 else '',
                    "Prefix": elements[6] if elements_length > 6 else '',
                    "Suffix": elements[7] if elements_length > 7 else '',
                    "IdentificationCodeQualifier": elements[8] if elements_length > 8 else '',
                    "IdentificationCode": elements[9] if elements_length > 9 else ''
                })

                # Check if N3 and N4 segments exist
                next_index = segments.index(segment) + 1
                if next_index < len(segments):
                    next_segment = segments[next_index].split("*")
                    if next_segment[0].strip() == "N3":
                        subscriber_info["Address"] = next_segment[1] if len(next_segment) > 1 else ''

                    next_index += 1
                    if next_index < len(segments):
                        next_segment = segments[next_index].split("*")
                        if next_segment[0].strip() == "N4":
                            subscriber_info.update({
                                "City": next_segment[1] if len(next_segment) > 1 else '',
                                "State": next_segment[2] if len(next_segment) > 2 else '',
                                "PostalCode": next_segment[3] if len(next_segment) > 3 else ''
                            })
                end_time = time.time()
                # print("time_taken for IL segment: {}".format(end_time - start_time))

            elif elements[0].strip() == "DMG":
                subscriber_info.update({
                    "DateTimeFormatQualifier": elements[1] if elements_length > 1 else '',
                    "DateOfBirth": elements[2] if elements_length > 2 else '',
                    "Gender": elements[3] if elements_length > 3 else ''
                })
                end_time = time.time()
                # print("time_taken for DMG segment: {}".format(end_time - start_time))
            elif elements[0].strip() == "PAT":
                subscriber_info.update({
                    "PatientRelationshipToInsured": elements[1] if elements_length > 1 else '',
                    "PregnencyIndicator": elements[9] if elements_length > 9 else '',
                })
            elif elements[0].strip() == "HL" and elements[1] == "3":
                while(True):
                    segment_idx += 1
                    elements = segments[segment_idx].split('*')
                    elements_length = len(elements)
                    if elements[0].strip() == "PAT":
                        subscriber_info["Patient"] = {
                            "PatientRelationshipToInsured": elements[1] if elements_length > 1 else '',
                            "DateTimeQualifier": elements[5] if elements_length > 5 else '',
                            "PatientDeathDate": elements[6] if elements_length > 6 else '',
                            "BasisOfMeasurement": elements[7] if elements_length > 7 else '',
                            "PatientWeight": elements[8] if elements_length > 8 else '',
                            "PregnencyIndicator": elements[9] if elements_length > 9 else '',
                        }

                    elif elements[0].strip() == "NM1" and elements[1] == "QC":
                        subscriber_info["Patient"].update({
                            "EntityTypeQualifier": elements[2] if elements_length > 2 else '',
                            "LastName": elements[3] if elements_length > 3 else '',
                            "FirstName": elements[4] if elements_length > 4 else '',
                            "MiddleName": elements[5] if elements_length > 5 else '',
                            "Prefix": elements[6] if elements_length > 6 else '',
                            "Suffix": elements[7] if elements_length > 7 else ''
                        })

                    elif elements[0].strip() == "N3":
                        subscriber_info["Patient"].update({
                            "Address": elements[1] if elements_length > 1 else ''
                        })

                    elif elements[0].strip() == "N4":
                        subscriber_info["Patient"].update({
                            "City": elements[1] if elements_length > 1 else '',
                            "State": elements[2] if elements_length > 2 else '',
                            "PostalCode": elements[3] if elements_length > 3 else '',
                        })

                    elif elements[0].strip() == "DMG":
                        subscriber_info["Patient"].update({
                            "DateTimeFormatQualifier": elements[1] if elements_length > 1 else '',
                            "DateOfBirth": elements[2] if elements_length > 2 else '',
                            "Gender": elements[3] if elements_length > 3 else ''
                        })

                    elif elements[0].strip() == "CLM":
                        segment_idx -= 1
                        break


            elif elements[0].strip() == "REF" and "SBRSet" in subscriber_info:  # Only process REF if subscriberInformation exists
                subscriber_info.update({
                    "ReferenceIdentificationQualifier": elements[1] if elements_length > 1 else '',
                    "ReferenceIdentification": elements[2] if elements_length > 2 else ''
                })
                end_time = time.time()
                # print("time_taken for REF segment: {}".format(end_time - start_time))

                    # Receiver Information (NM1*40)
            elif elements[0].strip() == "NM1" and elements[1] == "PR":
                subscriber_info["PayerInformation"] = {
                    "PayerName": elements[3] if elements_length > 3 else '',
                    "PayerId": elements[9] if elements_length > 9 else '',
                }
                next_index = segments.index(segment) + 1
                if next_index < len(segments):
                    next_segment = segments[next_index].split("*")
                    if next_segment[0].strip() == "N3":
                        subscriber_info["PayerInformation"]["Address"] = next_segment[1] if len(next_segment) > 1 else ""

                        next_next_index = next_index + 1
                        if next_next_index < len(segments):
                            next_next_segment = segments[next_next_index].split("*")
                            if next_next_segment[0].strip() == "N4":
                                subscriber_info["PayerInformation"]["City"] = next_next_segment[1].strip() if len(next_next_segment) > 1 else ""
                                subscriber_info["PayerInformation"]["State"] = next_next_segment[2].strip() if len(next_next_segment) > 2 else ""
                                subscriber_info["PayerInformation"]["PostalCode"] = next_next_segment[3].strip() if len(next_next_segment) > 3 else ""
                end_time = time.time()
                # print("time_taken for NM1 PR segment: {}".format(end_time - start_time))


            elif elements[0].strip() == "CLM":
              elements[5] = elements[5].split("|")
              if elements_length>11: elements[11] = elements[11].split("|")

              claiminfo = {
                      "ClaimIdentifier": elements[1] if elements_length > 1 else '',
                      "ClaimAmount": elements[2] if elements_length > 2 else '',
                      "PlaceHolder1": elements[3] if elements_length > 3 else '',
                      "PlaceHolder2": elements[4] if elements_length > 4 else '',
                      "PlaceofService": elements[5][0] if elements_length > 5 else '',
                      "PlaceofServiceCode": elements[5][1] if elements_length > 5 else '',
                      "ClaimFrequencyTypeCode": elements[5][2] if elements_length > 5 else '',
                      "ProviderSignatureIndicator": elements[6] if elements_length > 6 else '',
                      "ProviderAcceptAssignment": elements[7] if elements_length > 7 else '',
                      "ProviderBenefitsAssignmentCertification": elements[8] if elements_length > 8 else '',
                      "ReleaseofInformationCode": elements[9] if elements_length > 9 else '',
                      "ClientSignatureSourceCode": elements[10] if elements_length > 10 else '',
                      "AutoAccidentStateCode": elements[11][3] if elements_length > 11 and len(elements[11]) >3  else '',
                      "AutoAccident":"Yes" if(elements_length> 11 and "AA" in elements[11]) else "No",
                      "Employment":"Yes" if(elements_length> 11 and "EM" in elements[11]) else "No",
                      "OtherAccident":"Yes" if(elements_length> 11 and "OA" in elements[11]) else "No",
                      "SpecialProgramCode": elements[12] if elements_length > 12 else '',
                      "DelayReasonCode": elements[20] if elements_length > 20 else '',

                  }

              while(True):
                  segment_idx += 1
                  elements = segments[segment_idx].split('*')
                  elements_length = len(elements)

                  if elements[0].strip() == "DTP":
                      if "DTP" not in claiminfo: claiminfo["DTP"] = []
                      claiminfo['DTP'].append({
                          "Qualifier": elements[1] if elements_length > 1 else '',
                          "Format": elements[2] if elements_length > 2 else '',
                          "Date": elements[3] if elements_length > 3 else ''
                      })

                  elif elements[0].strip() == "CL1":
                      claiminfo["CL1"] = {
                          "AdmissionTypeCode": elements[1] if elements_length > 1 else '',
                          "AdmissionSourceCode": elements[2] if elements_length > 2 else '',
                          "PatientStatusCode": elements[3] if elements_length > 3 else ''
                      }

                  elif elements[0].strip() == "PWK":
                      claiminfo["PWK"] = {
                          "SupplementalInformationCode": elements[1] if elements_length > 1 else '',
                          "TransmissionCode ": elements[2] if elements_length > 2 else '',
                          "AttachmentControlNumberIdentifier": elements[5] if elements_length > 5 else '',
                          "AttachmentControlNumber": elements[6] if elements_length > 6 else '',
                      }

                  elif elements[0].strip() == "CRC":
                      claiminfo["CRC"] = {
                          "CodeCategory": elements[1] if elements_length > 1 else '',
                          "CertificationConditionIndicator": elements[2] if elements_length > 2 else '',
                          "ConditionCode": elements[3] if elements_length > 3 else ''
                      }

                  elif elements[0].strip() == "AMT":
                      claiminfo["AMT"] = {
                          "QualifierCode": elements[1] if elements_length > 1 else '',
                          "MonetaryAmount": elements[2] if elements_length > 2 else '',
                      }

                  elif elements[0].strip() == "NTE":
                      claiminfo["NTE"] = {
                          "ReferenceCode": elements[1] if elements_length > 1 else '',
                          "NoteText": elements[2] if elements_length > 2 else '',
                      }

                  elif elements[0].strip() == "REF":
                      if "ReferenceInformation" not in claiminfo: claiminfo["ReferenceInformation"]= []
                      claiminfo["ReferenceInformation"].append({
                          "ReferenceIdentificationQualifier": elements[1] if elements_length > 1 else '',
                          "ReferenceIdentification": elements[2] if elements_length > 2 else ''
                      })

                  elif elements[0].strip() == "HI":
                    subscriber_info["Claims"] = claiminfo
                    segment_idx -= 1
                    break
              end_time = time.time()
              # print("time_taken for CLM segment: {}".format(end_time - start_time))

            elif elements[0].strip() == "HI":
              subscriber_info["HccCodes"] = []
              while(elements[0].strip() == "HI"):
                  if elements[1][:2] == "BE":
                      subscriber_info["HccCodes"].append({
                          "DiagnosisCodeQualifier": "BE",
                          "DiagnosisCode": elements[1][3:]

                      })

                  else:
                    elements = [element.split('|') for element in elements]
                    for code in elements[1:]:
                      subscriber_info["HccCodes"].append({
                          "DiagnosisCodeQualifier": code[0],
                          "DiagnosisCode": code[1]
                      })
                  segment_idx += 1
                  elements = segments[segment_idx].split('*')
                  elements_length = len(elements)

              segment_idx -= 1

            elif elements[0].strip() == "NM1" and elements[1] == "71":
                subscriber_info["Physician"] = {
                    "EntityTypeQualifier": elements[2] if elements_length > 2 else '',
                    "Name": elements[3] if elements_length > 3 else '',
                    "FirstName": elements[4] if elements_length > 4 else '',
                    "MiddleName": elements[5] if elements_length > 5 else '',
                    "Prefix": elements[6] if elements_length > 6 else '',
                    "Suffix": elements[7] if elements_length > 7 else '',
                    "IdentificationCodeQualifier": elements[8] if elements_length > 8 else '',
                    "IdentificationCode": elements[9] if elements_length > 9 else ''
                }
                end_time = time.time()
                # print("time_taken for NM1 71 segment: {}".format(end_time - start_time))

            elif elements[0].strip() == "PRV" and "Physician" in subscriber_info:
                subscriber_info["Physician"].update( {
                    "ProviderCode": elements[1] if elements_length > 1 else '',
                    "ReferenceIdentificationQualifier": elements[2] if elements_length > 2 else '',
                    "ReferenceIdentification": elements[3] if elements_length > 3 else ''
                })

            elif elements[0].strip() == "NM1" and elements[1] == "77":
                subscriber_info["ServiceFacilityLocation"] = {
                    "EntityTypeQualifier": elements[2] if elements_length > 2 else '',
                    "OrganizationName": elements[3] if elements_length > 3 else '',
                    "FirstName": elements[4] if elements_length > 4 else '',
                    "MiddleName": elements[5] if elements_length > 5 else '',
                    "Prefix": elements[6] if elements_length > 6 else '',
                    "Suffix": elements[7] if elements_length > 7 else '',
                    "IdentificationCodeQualifier": elements[8] if elements_length > 8 else '',
                    "IdentificationCode": elements[9] if elements_length > 9 else ''
                }
                segment_idx += 1
                elements = segments[segment_idx].split('*')
                elements_length = len(elements)
                if elements[0].strip() == "N3":
                  subscriber_info["ServiceFacilityLocation"]["Address"] = elements[1] if elements_length > 1 else ""
                else:
                  segment_idx -= 1

                segment_idx += 1
                elements = segments[segment_idx].split('*')
                elements_length = len(elements)
                if elements[0].strip() == "N4":
                  subscriber_info["ServiceFacilityLocation"]["City"] = elements[1].strip() if elements_length > 1 else ""
                  subscriber_info["ServiceFacilityLocation"]["State"] = elements[2].strip() if elements_length > 2 else ""
                  subscriber_info["ServiceFacilityLocation"]["PostalCode"] = elements[3].strip() if elements_length > 3 else ""
                else:
                  segment_idx -= 1


            elif elements[0].strip() == "LX":
                service_lines = []
                current_service_info = {}  # Initialize current_service_info

                while segment_idx < len(segments):
                    elements = segments[segment_idx].split('*')
                    elements_length = len(elements)
                    next_segment_type = elements[0].strip()

                    if next_segment_type == "SE":
                        break

                    parsing_info = service_line_parsing_info.get(next_segment_type, None)
                    # print("next_segment", next_segment_type)
                    if parsing_info is None:
                        # print(f"Unknown segment code: {next_segment_type} in service line information")
                        segment_idx += 1
                        continue


                    if not parsing_info["contains_variable_elements"]:

                        for k, v in zip(parsing_info["rule"].split("*")[1:], elements[1:]):
                            if parsing_info["name"]=="rendering_provider" or parsing_info["name"] == "provider_info":
                              if "rendering_provider" not in current_service_info:
                                current_service_info["rendering_provider"] = {}
                              current_service_info["rendering_provider"][k] = v
                            else:
                              if k == "blank":
                                  continue
                              current_service_info[k] = v
                    else:
                        #print(parsing_info["name"])
                        element_keys = parsing_info["rule"].split('*')
                        for i in range(1, len(elements[1:]), len(element_keys)):
                            for idx in range(len(element_keys)):
                                if not element_keys[idx] == "blank":
                                    current_service_info[element_keys[idx]] = elements[i + idx]

                    segment_idx += 1

                    if segment_idx < len(segments):
                        next_element = segments[segment_idx].split('*')[0].strip()
                        if next_element == "LX":
                            service_lines.append(current_service_info.copy())
                            current_service_info = {}

                if current_service_info:  # Check if current_service_info is not empty
                    service_lines.append(current_service_info.copy())
                # print(transaction)
                transaction["ServiceLines"] = service_lines


            if elements[0].strip() == "SE":
                # saveToJson(transaction)
                # # print("segment_idx", segment_idx)
                # print(transaction)
                transaction["SBRSet"].append(subscriber_info)

                #creating patient record
                if len(transaction["SBRSet"]) == 1:
                    transaction["Subscriber"] = transaction["SBRSet"][0]
                    del transaction["SBRSet"]
                else:
                    transaction["Subscriber"] = transaction["SBRSet"].pop(0)

                transaction["Subscriber"]["ServiceLines"] = transaction["ServiceLines"]
                del transaction["ServiceLines"]

                if "SBRSet" in transaction:
                    if len(transaction["SBRSet"]) != 0:
                        transaction["SecondaryPayer"] = transaction.pop("SBRSet")
                transactions.append(transaction)
                transaction = {}

                # # print(segments[segment_idx+1].split('*'))



            segment_idx += 1
        # # print("while break", segment)
        healthcare_claim_set["ISA"]["Transaction"] = transactions
        print("last elements : ", elements)

        #print(healthcare_claim_set)
    return healthcare_claim_set

filename="xl213869f8_230415_i5.837"
with open(filename) as f:
  data = f.read()

# Convert EDI data to JSON
json_data = parse_edi(data)
#print(json_data)
saveParsedData(json_data)
